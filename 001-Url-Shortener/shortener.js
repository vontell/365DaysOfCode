/**
 * shortener.js is a human-readable URL shortener, perfect for those times when
 * you need to share long URLs with other humans.
 *
 *      Written by Aaron Vontell, Founder of Vontech Software, LLC
 */

// Module dependencies
const fs = require('fs');                // Used for opening the word file
const lineReader = require('readline');  // Used for buffering the file line by line

// Predefined constants
const baseDomain = "https://mywebsite.com/"
const wordFilePath = "resources/google-10000-english-usa-no-swears.txt";
const minWordLength = 3
const maxWordLength = 6

// Cached global variables
var words = []
var urlDictionary = {}

/**
 * Loads a list of words from the file at `wordFilePath`, which should contain
 * a list of newline-delimited words. Uses lineReader to do this in a buffered
 * and asynchronous manner.
 *      callback - A function that gets called when the file is done being read
 *                 (callback should not take any parameters)
 */
function loadValidWords(callback) {
    
    // If we already loaded the words, just return the already-loaded words!
    if (words.length > 0) {
        return words;
    }
    
    // Otherwise, startup the buffered reader
    var instance = lineReader.createInterface({
        input: fs.createReadStream(wordFilePath)
    });

    // If a line is encountered, add it to our list if it satisfies the length
    // constraints
    instance.on('line', function (line) {
        var wordLength = line.length;
        if (wordLength >= minWordLength && wordLength <= maxWordLength)
            words.push(line);
    });
    
    // Once finished, call the callback
    instance.on('close', function (line) {
        callback();
    });
    
}

/**
 * Returns a shortened version of the given `url`, which is saved for later
 * retrieval.
 *      url - The url to shorten
 */
function shortenURL(url) {
    
    // Grab a random word, removing it from the list
    // Note that we are splicing the original word list in order to
    // efficiently resize the existing array
    var randInt = getRandomInt(0, words.length - 1);
    var randWord = words.splice(randInt, 1)[0];
    
    // Save the random word --> url mapping
    urlDictionary[randWord] = url;
    
    // Return the shortened version of the URL
    return baseDomain + randWord;
    
}

/**
 * Returns the saved URL given the shortened URL (generated by this program)
 *      shortenedURL - A shortened URL generated by this program instance
 */
function getURLFromShortened(shortenedURL) {
    return urlDictionary[shortenedURL.replace(baseDomain, "")];
}

/**
 * Deletes the shortened URL record associated with the given shortenedURL,
 * returning the short URL word used back to the word pool.
 *      shortenedURL - A shortened URL generated by this program instance
 */
function removeShortenedURL(shortenedURL) {
    var word = shortenedURL.replace(baseDomain, "");
    delete urlDictionary[word];
    words.push(word);
}

/**
 * Returns a random integer between min (inclusive) and max (inclusive)
 * Using Math.round() will give you a non-uniform distribution!
 * Obtained from https://stackoverflow.com/questions/1527803
 *          /generating-random-whole-numbers-in-javascript-in-a-specific-range
 */
function getRandomInt(min, max) {
    return Math.floor(Math.random() * (max - min + 1)) + min;
}

function startServer() {
    
    loadValidWords(function() {
        
        console.log("Available words: " + words.length);
        var newURL = shortenURL("https://medium.com/365-days-of-coding");
        console.log("New URL: " + newURL);
        var oldURL = getURLFromShortened(newURL);
        console.log("Old URL: " + oldURL);
        removeShortenedURL(newURL);
        
    });
    
}

startServer()